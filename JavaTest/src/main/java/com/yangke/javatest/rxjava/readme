#####Rxjava使用说明


####Rxjava的五种观察者模式：
----------------------------------------------------------------------------------------------------
  类型                描述
Observale       能够发射0个或n个数据，并以成功或错误事件中止

Flowable        能够发射0个或n个数据，并以成功或错误事件中止

Single          只发射单个数据或错误事件

Completable     从来不发射数据，只处理onComplete和onError事件。可以看成Rx的Runnable

Maybe           能够发射0或者1个数据，要么成功，要么失败。有点类似Optional


####线程调度：
----------------------------------------------------------------------------------------------------
默认情况下不做任何线程处理，Observable和Observer处于同一个线程中。如果想要切换线程，则可以使用subscribeOn()和
observeOn()。

###subscribeOn
subscribeOn通过接收一个Scheduler参数，来指定对数据的处理运行在特定的线程调度器Scheduler上。若多次执行
subscribeOn，则只有一次起作用。

###observeOn
observeOn同样接收一个Scheduler参数，用来指定下游操作运行在特定的线程调度器Scheduler上。若多次执行observeOn，
则每次都起作用，线程会一直切换。

####变换操作符和过滤操作符
----------------------------------------------------------------------------------------------------
###RxJava的变换操作符主要包括以下几种。
* map()：对序列的每一项都用一个函数来变换Observable发射的数据序列。

* flatMap()、concatMap()和flatMap()：将Observable发射的数据集合变换为Observable集合，然后将这些Observable
发射的数据平坦化地放进一个单独的Observable中。

* switchMap()：将Observable发射的数据集合变换为Observables集合，然后只发射这些Observables最近发射过的数据。

* scan(): 对Observable发射的每一项数据应用一个函数，然后按顺序依次发射每一个值。

* groupBy()：将Observable拆分为Observable结合，将原始Observable发射的数据按Key分组，每一个Observable发射过
一组不同的数据。

* buffer()：定期从Observable收集数据到一个集合，然后把这些数据集合打包发射，而不是一次发射一个。

* window()：定期将来自Observable的数据拆分成一些Observable窗口，然后发射这些窗口，而不是每次发射一项。

* cast()：在发射之前强制将Observable发射的所有数据转换为指定类型。

###Rxjava的过滤操作符主要包括以下几种
* filter()：过滤数据。

* takeLast()：只发射最后的N项数据。

* last()：只发射最后一项数据。

* lastOrDefault()：只发射最后一项数据，如果Observable为空，就发射默认值。

* takeLastBuffer()：将最后的N项数据当作单个数据发射。

* skip()：跳过开始的N项数据。

* skipLast()：跳过最后的N项数据。

* take()：值发射开始的N项数据。

* first() and takeFirst()：只发射第一项数据，或者满足某种条件的第一项数据。

* firstOrDefault()：只发射第一项数据，如果Observable为空，就发射默认值。

* elementAt()：发射第N项数据。

* elementAtOrDefault()：发射第N项数据，如果Observable数据少于N项，就发射默认值。

* throttleFirst()：定期发射Observable发射的第一项数据。

* throttleWithTimeout() or debounce()：只有当Observable在指定的时间段后还没有发射数据时，才发射一个数据。

* timeout()：如果在一个指定的时间段后还没发射数据，就发射一个异常。

* distinct()：过滤掉重复的数据。

* distinctUntilChanged()：过滤掉连续重复的数据。

* ofType()：只发射指定类型的数据。

* ignoreElements()：丢弃所有的正常数据，只发射错误或完成通知。

###合并操作符与连接操作符
RxJava的合并操作符主要包括如下几个。
* startWith():在数据序列的开头增加一项数据

* merge()：将多个Observable合并为一个。merge是按照时间线并行的。如果传递给merge任何一个Observable发射了
onError通知终止，则merge操作符生成的Observable也会立即以onError通知终止。如果想让它继续发射数据，知道最后才报告
错误，则可以使用mergeDelayError操作符。如果只是两个被观察者合并，则还可以使用mergeWith操作符，
Observable.merge(observable1, observable2)等价于Observable.mergeWith(evens)。merge操作符最多只能合并4个被
观察者，如果需要合并更多个观察者，则可以使用mergeArray操作符。

* mergeDelayError()：合并多个Observable，让没有错误的Observable都完成后再发射错误通知。

* zip()：使用一个函数组合多个Observable发射的数据集合，然后再发射这个结果。

* combineLatest()：当两个Observable中的任何一个发射了一个数据时，通过一个指定的函数组合每个Observable发射的最
新数据（一共两个数据），然后发射这个函数的结果。

* join() and groupJoin()：无论何时，如果一个Observable发射了一个数据项，就需要在另一个Observable发射的数据项
定义的时间窗口内，将两个Observable发射的数据合并发射。

* switchOnNext()：将一个发射Observable的Observable转换成领一个Observable，后者发射这些Observable最近发射的
数据。

###Rxjava的连接操作符，主要是ConnectableObservable使用的操作符和Observable所使用的Observable。
* ConnectableObservable.connect()：只是一个可连接的Observable开始发射数据。

* Observable.publish()：将一个Observable转换为一个可连接的Observable。

* Observable.replay()：确保所有的观察者看到相同的数据序列，即使它们在Observable开始发射数据之后才订阅。

* ConnectableObservable.refCount()：让一个可连接的Observable表现得想一个普通的Observable。


